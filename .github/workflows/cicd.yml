name: CD
on:
  push:
    branches: [ "main" ]

env:
  dotnet_versions: |
                   8.0.x
                   9.0.x

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{env.dotnet_versions}}

      - name: Install Versionize
        run: dotnet tool install --global Versionize

      - name: Setup git
        run: |
          git config --global user.email opencommissioning@spiratec.com
          git config --global user.name "oc-bot"

      - name: Versioning
        id: versionize
        run: versionize --exit-insignificant-commits
        continue-on-error: true

      - name: Get current version
        if: steps.versionize.outcome == 'success'
        run: echo "VERSION=$(versionize inspect)" >> $GITHUB_ENV

      - name: Get current changelog
        if: steps.versionize.outcome == 'success'
        run: echo "$(versionize changelog)" > latest_changelog.md

      - name: Push changes to GitHub
        if: steps.versionize.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true

      - name: Dotnet build
        if: steps.versionize.outcome == 'success'
        run: dotnet build --configuration release

      - name: Push to NuGet
        if: steps.versionize.outcome == 'success'
        run: dotnet nuget push "/home/runner/work/OC_TcPnScanner/OC_TcPnScanner/src/dsian.TcPnScanner.CLI/bin/release/*.nupkg" --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json

      - name: Publish new release
        if: steps.versionize.outcome == 'success'
        run: |
          gh release create v${{env.VERSION}} -t "Release v${{env.VERSION}}" -F latest_changelog.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
